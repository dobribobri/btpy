#  -*- coding: utf-8 -*-
from typing import Union
from enum import Enum
import numpy as np


dB2np = 0.23255814


class Oxygen:
    class Models(Enum):
        P676_13 = '1. ITU-R P.676-13'
        P676_3 = '2. ITU-R P.676-3 (approx)'
        PREV = '3. Смирнов М.Т.'

    class P676_13:
        lines = {
            50.474214: [0, 0.975, 9.651, 6.690, 0.0, 2.566, 6.850],
            50.987745: [0, 2.529, 8.653, 7.170, 0.0, 2.246, 6.800],
            51.503360: [0, 6.193, 7.709, 7.640, 0.0, 1.947, 6.729],
            52.021429: [0, 14.320, 6.819, 8.110, 0.0, 1.667, 6.640],
            52.542418: [0, 31.240, 5.983, 8.580, 0.0, 1.388, 6.526],
            53.066934: [0, 64.290, 5.201, 9.060, 0.0, 1.349, 6.206],
            53.595775: [0, 124.600, 4.474, 9.550, 0.0, 2.227, 5.085],
            54.130025: [0, 227.300, 3.800, 9.960, 0.0, 3.170, 3.750],
            54.671180: [0, 389.700, 3.182, 10.370, 0.0, 3.558, 2.654],
            55.221384: [0, 627.100, 2.618, 10.890, 0.0, 2.560, 2.952],
            55.783815: [0, 945.300, 2.109, 11.340, 0.0, -1.172, 6.135],
            56.264774: [0, 543.400, 0.014, 17.030, 0.0, 3.525, -0.978],
            56.363399: [0, 1331.800, 1.654, 11.890, 0.0, -2.378, 6.547],
            56.968211: [0, 1746.600, 1.255, 12.230, 0.0, -3.545, 6.451],
            57.612486: [0, 2120.100, 0.910, 12.620, 0.0, -5.416, 6.056],
            58.323877: [0, 2363.700, 0.621, 12.950, 0.0, -1.932, 0.436],
            58.446588: [0, 1442.100, 0.083, 14.910, 0.0, 6.768, -1.273],
            59.164204: [0, 2379.900, 0.387, 13.530, 0.0, -6.561, 2.309],
            59.590983: [0, 2090.700, 0.207, 14.080, 0.0, 6.957, -0.776],
            60.306056: [0, 2103.400, 0.207, 14.150, 0.0, -6.395, 0.699],
            60.434778: [0, 2438.000, 0.386, 13.390, 0.0, 6.342, -2.825],
            61.150562: [0, 2479.500, 0.621, 12.920, 0.0, 1.014, -0.584],
            61.800158: [0, 2275.900, 0.910, 12.630, 0.0, 5.014, -6.619],
            62.411220: [0, 1915.400, 1.255, 12.170, 0.0, 3.029, -6.759],
            62.486253: [0, 1503.000, 0.083, 15.130, 0.0, -4.499, 0.844],
            62.997984: [0, 1490.200, 1.654, 11.740, 0.0, 1.856, -6.675],
            63.568526: [0, 1078.000, 2.108, 11.340, 0.0, 0.658, -6.139],
            64.127775: [0, 728.700, 2.617, 10.880, 0.0, -3.036, -2.895],
            64.678910: [0, 461.300, 3.181, 10.380, 0.0, -3.968, -2.590],
            65.224078: [0, 274.000, 3.800, 9.960, 0.0, -3.528, -3.680],
            65.764779: [0, 153.000, 4.473, 9.550, 0.0, -2.548, -5.002],
            66.302096: [0, 80.400, 5.200, 9.060, 0.0, -1.660, -6.091],
            66.836834: [0, 39.800, 5.982, 8.580, 0.0, -1.680, -6.393],
            67.369601: [0, 18.560, 6.818, 8.110, 0.0, -1.956, -6.475],
            67.900868: [0, 8.172, 7.708, 7.640, 0.0, -2.216, -6.545],
            68.431006: [0, 3.397, 8.652, 7.170, 0.0, -2.492, -6.600],
            68.960312: [0, 1.334, 9.650, 6.690, 0.0, -2.773, -6.650],
            118.750334: [0, 940.300, 0.010, 16.640, 0.0, -0.439, 0.079],
            368.498246: [0, 67.400, 0.048, 16.400, 0.0, 0.000, 0.000],
            424.763020: [0, 637.700, 0.044, 16.400, 0.0, 0.000, 0.000],
            487.249273: [0, 237.400, 0.049, 16.000, 0.0, 0.000, 0.000],
            715.392902: [0, 98.100, 0.145, 16.000, 0.0, 0.000, 0.000],
            773.839490: [0, 572.300, 0.141, 16.200, 0.0, 0.000, 0.000],
            834.145546: [0, 183.100, 0.145, 14.700, 0.0, 0.000, 0.000],
        }

        @staticmethod
        def __N_d(f: float,
                  th: Union[float, np.ndarray], p: Union[float, np.ndarray],
                  d: Union[float, np.ndarray]):
            return f * p * th * th * (
                    (6.4 / 100000) / (d * (1 + (f / d) * (f / d))) +
                    (1.4 / 1000000000000 * p * np.power(th, 1.5)) / (1 + 1.9 / 100000 * np.power(f, 1.5))
            )

        @staticmethod
        def __N_oxygen(f: float,
                       t: Union[float, np.ndarray], p: Union[float, np.ndarray],
                       rho: Union[float, np.ndarray]):
            e = rho * t / 216.7
            th = 300 / t
            N = 0.
            _c_1 = p * th * th * th / 10000000
            _c_2 = 1. - th
            _c_3 = 1.1 * e * th
            _c_4 = (p + e) * np.power(th, 0.8) / 10000
            for i, f_i in enumerate(Oxygen.P676_13.lines.keys()):
                a = Oxygen.P676_13.lines[f_i]
                S_i = a[1] * _c_1 * np.exp(a[2] * _c_2)
                df_i = a[3] / 10000 * (p * np.power(th, 0.8 - a[4]) + _c_3)
                df_i = np.sqrt(df_i * df_i + 2.25 / 1000000)
                delta_i = (a[5] + a[6] * th) * _c_4
                F_i = f / f_i * (
                        (df_i - delta_i * (f_i - f)) / ((f_i - f) * (f_i - f) + df_i * df_i) +
                        (df_i - delta_i * (f_i + f)) / ((f_i + f) * (f_i + f) + df_i * df_i)
                )
                N = N + S_i * F_i
            d = 5.6 * _c_4
            return N + Oxygen.P676_13.__N_d(f, th, p, d)

        @staticmethod
        def gamma(frequency: float,
                  T: Union[float, np.ndarray], P: Union[float, np.ndarray],
                  rho: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
            """
            :param frequency: частота излучения в ГГц
            :param T: термодинамическая температура, градусы Цельсия
            :param P: атмосферное давление, мбар или гПа
            :param rho: абсолютная влажность, г/м^3
            :return: погонный коэффициент поглощения в кислороде (нп/км)
            """
            return dB2np * 0.1820 * frequency * Oxygen.P676_13.__N_oxygen(frequency, T + 273.15, P, rho)

    class P676_3:
        @staticmethod
        def gamma(frequency: float,
                  T: Union[float, np.ndarray], P: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
            """
            :param frequency: частота излучения в ГГц
            :param T: термодинамическая температура, градусы Цельсия
            :param P: атмосферное давление, мбар или гПа
            :return: погонный коэффициент поглощения в кислороде (нп/км)
            """
            rp = P / 1013
            rt = 288 / (273 + T)
            f = frequency
            gamma = 0
            if f <= 57:
                gamma = (7.27 * rt / (f * f + 0.351 * rp * rp * rt * rt) +
                         7.5 / ((f - 57) * (f - 57) + 2.44 * rp * rp * rt * rt * rt * rt * rt)) * \
                        f * f * rp * rp * rt * rt / 1000
            elif 63 <= f <= 350:
                gamma = (2 / 10000 * np.power(rt, 1.5) * (1 - 1.2 / 100000 * np.power(f, 1.5)) +
                         4 / ((f - 63) * (f - 63) + 1.5 * rp * rp * rt * rt * rt * rt * rt) +
                         0.28 * rt * rt / ((f - 118.75) * (f - 118.75) + 2.84 * rp * rp * rt * rt)) * \
                        f * f * rp * rp * rt * rt / 1000
            elif 57 < f < 63:
                gamma = (f - 60) * (f - 63) / 18 * Oxygen.P676_3.gamma(57., T, P) - \
                        1.66 * rp * rp * np.power(rt, 8.5) * (f - 57) * (f - 63) + \
                        (f - 57) * (f - 60) / 18 * Oxygen.P676_3.gamma(63., T, P)
            return dB2np * gamma

    class Prev:
        @staticmethod
        def gamma(f: float,
                  T: Union[float, np.ndarray], P: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
            T += 273.15
            fp = np.asarray([56.26476, 58.44658, 59.59098, 60.43479, 61.15057, 61.80017,
                             62.41121, 62.99798, 63.56851, 64.12776, 64.67891, 65.22410, 65.76474,
                             66.30205, 66.83676, 67.36951, 67.90073, 68.43079, 68.96100, 69.48867,
                             70.01689, 70.54489, 71.07162, 71.59919, 72.12695])
            fm = np.asarray([118.7503, 62.48625, 60.30603, 59.16420, 58.32388, 57.61249,
                             56.96817, 56.36339, 55.78381, 55.22136, 54.67114, 54.12996, 53.59567,
                             53.06679, 52.54222, 52.02116, 51.50300, 50.98729, 50.47359, 49.96179,
                             49.45138, 48.94240, 48.43611, 47.92955, 47.42391])
            ff = f * f
            A = np.where(P <= 25.26, 0.001054,
                         np.where(P <= 331.0, 0.001054-0.1717E-5 * (P-25.26),
                                  0.525E-3
                                  )
                         )
            df = A * P * np.power((300.0/T), 0.9) + 6.33E-8 * ff * np.power(T, 0.5)

            sn3 = 0.
            for i in range(1, 25):
                m = 2*i - 1.0
                m0 = 2 * (m * m + m + 1.0) * (2 * m + 1.0) / (m * (m + 1.0))
                mp = m * (2 * m + 3.0) / (m + 1.0)
                mm = (m + 1.0) * (2 * m - 1.0) / m
                fn0 = 0.6 / (ff + 0.36)
                fn2 = fp[i] * fp[i]
                fnp = 4.0 * fn2 * df / ((fn2 - ff) * (fn2 - ff) + 4.0 * ff * df * df)
                fn1 = fm[i] * fm[i]
                fnm = 4.0 * fn1 * df / ((fn2 - ff) * (fn2 - ff) + 4.0 * ff * df * df)
                sn1 = np.exp(-2.06858 * m * (m + 1.0) / T)
                sn2 = (m0 * fn0 + mp * fnp + mm * fnm)
                sn3 += (sn2 * sn1)
            ab = 0.4517 * P * ff * sn3 / T / T / T
            return dB2np * ab

    @staticmethod
    def gamma(model: str, frequency: float, T: Union[float, np.ndarray], P: Union[float, np.ndarray],
              rho: Union[float, np.ndarray] = None) -> Union[float, np.ndarray]:
        if model == Oxygen.Models.P676_13.value:
            return Oxygen.P676_13.gamma(frequency, T, P, rho)
        if model == Oxygen.Models.P676_3.value:
            return Oxygen.P676_3.gamma(frequency, T, P)
        if model == Oxygen.Models.PREV.value:
            return Oxygen.Prev.gamma(frequency, T, P)
        # default
        return Oxygen.P676_13.gamma(frequency, T, P, rho)


class WaterVapor:
    class Models(Enum):
        P676_13 = '1. ITU-R P.676-13'
        P676_3 = '2. ITU-R P.676-3 (approx)'
        PREV = '3. Ф-ла Баретта и Чанга'

    class P676_13:
        lines = {
            22.235080: [0, 0.1079, 2.144, 26.38, 0.76, 5.087, 1.00],
            67.803960: [0, 0.0011, 8.732, 28.58, 0.69, 4.930, 0.82],
            119.995940: [0, 0.0007, 8.353, 29.48, 0.70, 4.780, 0.79],
            183.310087: [0, 2.273, 0.668, 29.06, 0.77, 5.022, 0.85],
            321.225630: [0, 0.0470, 6.179, 24.04, 0.67, 4.398, 0.54],
            325.152919: [0, 1.514, 1.541, 28.23, 0.64, 4.893, 0.74],
            336.227764: [0, 0.0010, 9.825, 26.93, 0.69, 4.740, 0.61],
            380.197353: [0, 11.67, 1.048, 28.11, 0.54, 5.063, 0.89],
            390.134508: [0, 0.0045, 7.347, 21.52, 0.63, 4.810, 0.55],
            437.346667: [0, 0.0632, 5.048, 18.45, 0.60, 4.230, 0.48],
            439.150807: [0, 0.9098, 3.595, 20.07, 0.63, 4.483, 0.52],
            443.018343: [0, 0.1920, 5.048, 15.55, 0.60, 5.083, 0.50],
            448.001085: [0, 10.41, 1.405, 25.64, 0.66, 5.028, 0.67],
            470.888999: [0, 0.3254, 4.597, 21.34, 0.66, 4.506, 0.65],
            474.687092: [0, 1.260, 2.379, 23.20, 0.65, 4.804, 0.64],
            488.490108: [0, 0.2529, 2.852, 25.86, 0.69, 5.201, 0.72],
            503.568532: [0, 0.0372, 6.731, 16.12, 0.61, 3.980, 0.43],
            504.482692: [0, 0.0124, 6.731, 16.12, 0.61, 4.010, 0.45],
            547.676440: [0, 0.9785, 0.158, 26.00, 0.70, 4.500, 1.00],
            552.020960: [0, 1840, 0.158, 26.00, 0.70, 4.500, 1.00],
            556.935985: [0, 497.0, 0.159, 30.86, 0.69, 4.552, 1.00],
            620.700807: [0, 5.015, 2.391, 24.38, 0.71, 5.856, 0.68],
            645.766085: [0, 0.0067, 8.633, 18.00, 0.60, 4.000, 0.50],
            658.005280: [0, 0.2732, 7.816, 32.10, 0.69, 4.140, 1.00],
            752.033113: [0, 243.4, 0.396, 30.86, 0.68, 4.352, 0.84],
            841.051732: [0, 0.0134, 8.177, 15.90, 0.33, 5.760, 0.45],
            859.965698: [0, 0.1325, 8.055, 30.60, 0.68, 4.090, 0.84],
            899.303175: [0, 0.0547, 7.914, 29.85, 0.68, 4.530, 0.90],
            902.611085: [0, 0.0386, 8.429, 28.65, 0.70, 5.100, 0.95],
            906.205957: [0, 0.1836, 5.110, 24.08, 0.70, 4.700, 0.53],
            916.171582: [0, 8.400, 1.441, 26.73, 0.70, 5.150, 0.78],
            923.112692: [0, 0.0079, 10.293, 29.00, 0.70, 5.000, 0.80],
            970.315022: [0, 9.009, 1.919, 25.50, 0.64, 4.940, 0.67],
            987.926764: [0, 134.6, 0.257, 29.85, 0.68, 4.550, 0.90],
            1780.000000: [0, 17506, 0.952, 196.3, 2.00, 24.15, 5.00],
        }

        @staticmethod
        def __N_water_vapor(f: float,
                            t: Union[float, np.ndarray], p: Union[float, np.ndarray],
                            rho: Union[float, np.ndarray]):
            e = rho * t / 216.7
            th = 300 / t
            N = 0.
            _c_1 = e * np.power(th, 3.5) / 10.
            _c_2 = 1. - th
            for i, f_i in enumerate(WaterVapor.P676_13.lines.keys()):
                b = WaterVapor.P676_13.lines[f_i]
                S_i = b[1] * _c_1 * np.exp(b[2] * _c_2)
                df_i = b[3] / 10000 * (p * np.power(th, b[4]) + b[5] * e * np.power(th, b[6]))
                df_i = 0.535 * df_i + np.sqrt(
                    0.217 * df_i * df_i + (2.1316 / 1000000000000 * f_i * f_i) / th
                )
                F_i = f / f_i * (
                        df_i / ((f_i - f) * (f_i - f) + df_i * df_i) +
                        df_i / ((f_i + f) * (f_i + f) + df_i * df_i)
                )
                N = N + S_i * F_i
            return N

        @staticmethod
        def gamma(frequency: float,
                  T: Union[float, np.ndarray], P: Union[float, np.ndarray],
                  rho: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
            """
            :param frequency: частота излучения в ГГц
            :param T: термодинамическая температура, градусы Цельсия
            :param P: атмосферное давление, мбар или гПа
            :param rho: абсолютная влажность, г/м^3
            :return: погонный коэффициент поглощения в водяном паре (нп/км)
            """
            return dB2np * 0.1820 * frequency * \
                WaterVapor.P676_13.__N_water_vapor(frequency, T + 273.15, P, rho)

    class P676_3:
        @staticmethod
        def gamma(frequency: float,
                  T: Union[float, np.ndarray], P: Union[float, np.ndarray],
                  rho: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
            """
            :param frequency: частота излучения в ГГц
            :param T: термодинамическая температура, градусы Цельсия
            :param P: атмосферное давление, мбар или гПа
            :param rho: абсолютная влажность, г/м^3
            :return: погонный коэффициент поглощения в водяном паре (нп/км)
            """
            rp = P / 1013
            rt = 288 / (273 + T)
            f = frequency
            gamma = 0
            if f <= 350:
                gamma = (3.27 / 100 * rt +
                         1.67 / 1000 * rho * rt * rt * rt * rt * rt * rt * rt / rp +
                         7.7 / 10000 * np.power(f, 0.5) +
                         3.79 / ((f - 22.235) * (f - 22.235) + 9.81 * rp * rp * rt) +
                         11.73 * rt / ((f - 183.31) * (f - 183.31) + 11.85 * rp * rp * rt) +
                         4.01 * rt / ((f - 325.153) * (f - 325.153) + 10.44 * rp * rp * rt)) * \
                        f * f * rho * rp * rt / 10000
            return dB2np * gamma

    class Prev:
        @staticmethod
        def gamma(nu: float, T: Union[float, np.ndarray], P: Union[float, np.ndarray],
                  rho: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
            """
            :param nu: ГГц
            :param T: град. Цельс.
            :param P: мбар
            :param rho: г/м3
            :return: погонный коэффициент поглощения в водяном паре (нп/км)
            """
            T = T + 273.15
            dnu = 2.58 * 0.001 * P / np.power(T / 318., 0.625) * (1 + 0.0147 * rho * T / P)
            return 32.4 * np.exp(-644. / T) * (nu * nu * P * rho) / np.power(T, 3.125) * (
                        1 + 0.0147 * rho * T / P) * \
                (1 / ((nu - 22.235) * (nu - 22.235) + dnu * dnu) + 1 / (
                            (nu + 22.235) * (nu + 22.235) + dnu * dnu)) + \
                2.55 * 0.001 * (rho * nu * nu * dnu) / np.power(T, 3 / 2)

    @staticmethod
    def gamma(model: str, frequency: float, T: Union[float, np.ndarray], P: Union[float, np.ndarray],
              rho: Union[float, np.ndarray]) -> Union[float, np.ndarray]:
        if model == WaterVapor.Models.P676_13.value:
            return WaterVapor.P676_13.gamma(frequency, T, P, rho)
        if model == WaterVapor.Models.P676_3.value:
            return WaterVapor.P676_3.gamma(frequency, T, P, rho)
        if model == WaterVapor.Models.PREV.value:
            return WaterVapor.Prev.gamma(frequency, T, P, rho)
        # default
        return WaterVapor.P676_13.gamma(frequency, T, P, rho)
